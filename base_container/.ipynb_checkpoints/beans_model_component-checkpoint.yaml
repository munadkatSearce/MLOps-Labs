name: Train air
inputs:
- {name: dataset, type: Dataset}
- {name: model_type}
outputs:
- {name: model, type: Model}
- {name: metrics, type: Metrics}
implementation:
  container:
    image: gcr.io/impact-analytics-sandbox/create_base_image:v1
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.9' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def train_air(
          dataset:  Input[Dataset],
          model_type,
          model: Output[Model],
          metrics: Output[Metrics],
      ):
          import pandas as pd
          import numpy as np
          import torch
          import matplotlib.pyplot as plt

          from darts import TimeSeries
          from darts.utils.timeseries_generation import (
              gaussian_timeseries,
              linear_timeseries,
              sine_timeseries,
          )
          from darts.models import RNNModel
          from darts.metrics import mape, mse, rmse
          from darts.dataprocessing.transformers import Scaler
          from darts.utils.timeseries_generation import datetime_attribute_timeseries

          air_df = pd.read_csv(dataset.path+".csv")
          air_df['Month']=pd.to_datetime(air_df['Month'])
          air_df.sort_values(by="Month",inplace=True)
          air_df.index = air_df['Month']
          air_df.drop("Month",inplace=True,axis=1)
          series = TimeSeries.from_dataframe(air_df)
          # Create training and validation sets:
          train, val = series.split_after(pd.Timestamp("19590101"))

          # Normalize the time series (note: we avoid fitting the transformer on the validation set)
          transformer = Scaler()
          train_transformed = transformer.fit_transform(train)
          val_transformed = transformer.transform(val)
          series_transformed = transformer.transform(series)

          # create month and year covariate series
          year_series = datetime_attribute_timeseries(
              pd.date_range(start=series.start_time(), freq=series.freq_str, periods=1000),
              attribute="year",
              one_hot=False,
          )
          year_series = Scaler().fit_transform(year_series)
          month_series = datetime_attribute_timeseries(
              year_series, attribute="month", one_hot=True
          )
          covariates = year_series.stack(month_series)
          cov_train, cov_val = covariates.split_after(pd.Timestamp("19590101"))
          my_model = RNNModel(
              model=model_type,
              hidden_dim=20,
              dropout=0,
              batch_size=16,
              n_epochs=300,
              optimizer_kwargs={"lr": 1e-3},
              model_name="Air_"+model_type,
              log_tensorboard=True,
              random_state=42,
              training_length=20,
              input_chunk_length=14,
              force_reset=True,
              save_checkpoints=True,
          )
          my_model.fit(
              train_transformed,
              future_covariates=covariates,
              val_series=val_transformed,
              val_future_covariates=covariates,
              verbose=False,
          )
          my_model.save("air_model.pth.tar")
          def eval_model(model):
              pred_series = model.predict(n=26, future_covariates=covariates)
              print("MAPE: {:.2f}%".format(mape(pred_series, val_transformed)))
              print("MSE: {:.2f}%".format(mse(pred_series, val_transformed)))
              print("RMSE: {:.2f}%".format(rmse(pred_series, val_transformed)))
          eval_model(my_model)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train_air
